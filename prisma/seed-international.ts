import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';

const prisma = new PrismaClient();

// T√ºrk√ße isimler
const turkishNames = [
  'Ahmet Yƒ±lmaz', 'Mehmet Kaya', 'Ali Demir', 'Ay≈üe √ñzkan', 'Fatma √áelik',
  'Mustafa Arslan', 'Zeynep Yƒ±ldƒ±z', 'Emre √ñzt√ºrk', 'Selin Aydƒ±n', 'Burak ≈ûahin',
  'Elif Korkmaz', 'Can √ñzdemir', 'Seda Yƒ±lmaz', 'Oƒüuz Kƒ±lƒ±√ß', 'Pƒ±nar Akta≈ü',
  'Deniz √ñzkan', 'Gizem Yƒ±ldƒ±rƒ±m', 'Tolga √áetin', 'Burcu Aydƒ±n', 'Serkan Yƒ±lmaz'
];

// Uluslararasƒ± isimler
const internationalNames = [
  // ƒ∞ngiliz
  'John Smith', 'Emma Johnson', 'Michael Brown', 'Sarah Davis', 'David Wilson',
  'Lisa Anderson', 'James Taylor', 'Jennifer Thomas', 'Robert Jackson', 'Mary White',
  
  // Fransƒ±z
  'Pierre Martin', 'Marie Dubois', 'Jean Bernard', 'Sophie Laurent', 'Paul Moreau',
  'Claire Petit', 'Fran√ßois Roux', 'Isabelle Leroy', 'Antoine Simon', 'Nathalie Garcia',
  
  // Alman
  'Hans Mueller', 'Anna Schmidt', 'Klaus Weber', 'Greta Fischer', 'Wolfgang Wagner',
  'Ingrid Becker', 'Dieter Schulz', 'Ursula Hoffmann', 'Rainer Klein', 'Petra Richter',
  
  // ƒ∞talyan
  'Marco Rossi', 'Giulia Bianchi', 'Alessandro Ferrari', 'Francesca Romano', 'Luca Conti',
  'Valentina Ricci', 'Matteo Gallo', 'Chiara Leone', 'Andrea Costa', 'Elena Martini',
  
  // ƒ∞spanyol
  'Carlos Rodriguez', 'Maria Garcia', 'Jose Martinez', 'Ana Lopez', 'Antonio Gonzalez',
  'Carmen Sanchez', 'Francisco Perez', 'Isabel Torres', 'Manuel Ruiz', 'Pilar Diaz',
  
  // Japon
  'Yuki Tanaka', 'Hiroshi Sato', 'Aiko Yamamoto', 'Takeshi Suzuki', 'Yumi Nakamura',
  'Kenji Watanabe', 'Sakura Ito', 'Masahiro Kobayashi', 'Akiko Takahashi', 'Kenta Saito',
  
  // Koreli
  'Min-jun Kim', 'So-young Park', 'Jae-ho Lee', 'Hye-jin Choi', 'Sung-hoon Jung',
  'Eun-ji Kang', 'Dong-hyun Han', 'Ji-eun Lim', 'Seung-woo Oh', 'Mi-kyung Shin'
];

// ≈ûehir ve √ºlke verileri
const cities = [
  // T√ºrkiye
  { name: 'ƒ∞stanbul', country: 'T√ºrkiye', district: 'Kadƒ±k√∂y' },
  { name: 'Ankara', country: 'T√ºrkiye', district: '√áankaya' },
  { name: 'ƒ∞zmir', country: 'T√ºrkiye', district: 'Konak' },
  { name: 'L√ºleburgaz', country: 'T√ºrkiye', district: 'Merkez' },
  { name: 'Pƒ±narhisar', country: 'T√ºrkiye', district: 'Merkez' },
  { name: 'Vize', country: 'T√ºrkiye', district: 'Merkez' },
  { name: 'Babaeski', country: 'T√ºrkiye', district: 'Merkez' },
  { name: 'Kƒ±rklareli', country: 'T√ºrkiye', district: 'Merkez' },
  
  // ƒ∞ngiltere
  { name: 'London', country: 'ƒ∞ngiltere', district: 'Westminster' },
  { name: 'Manchester', country: 'ƒ∞ngiltere', district: 'City Centre' },
  { name: 'Birmingham', country: 'ƒ∞ngiltere', district: 'Digbeth' },
  { name: 'Liverpool', country: 'ƒ∞ngiltere', district: 'City Centre' },
  { name: 'Leeds', country: 'ƒ∞ngiltere', district: 'City Centre' },
  
  // Fransa
  { name: 'Paris', country: 'Fransa', district: '8√®me Arrondissement' },
  { name: 'Lyon', country: 'Fransa', district: 'Presqu\'√Æle' },
  { name: 'Marseille', country: 'Fransa', district: 'Vieux Port' },
  { name: 'Toulouse', country: 'Fransa', district: 'Capitole' },
  { name: 'Nice', country: 'Fransa', district: 'Promenade des Anglais' },
  
  // Almanya
  { name: 'Berlin', country: 'Almanya', district: 'Mitte' },
  { name: 'M√ºnih', country: 'Almanya', district: 'Altstadt' },
  { name: 'Hamburg', country: 'Almanya', district: 'Altstadt' },
  { name: 'K√∂ln', country: 'Almanya', district: 'Altstadt' },
  { name: 'Frankfurt', country: 'Almanya', district: 'Innenstadt' },
  
  // ƒ∞talya
  { name: 'Roma', country: 'ƒ∞talya', district: 'Centro Storico' },
  { name: 'Milano', country: 'ƒ∞talya', district: 'Centro' },
  { name: 'Napoli', country: 'ƒ∞talya', district: 'Centro Storico' },
  { name: 'Torino', country: 'ƒ∞talya', district: 'Centro' },
  { name: 'Firenze', country: 'ƒ∞talya', district: 'Centro Storico' },
  
  // ƒ∞spanya
  { name: 'Madrid', country: 'ƒ∞spanya', district: 'Centro' },
  { name: 'Barcelona', country: 'ƒ∞spanya', district: 'Ciutat Vella' },
  { name: 'Valencia', country: 'ƒ∞spanya', district: 'Ciutat Vella' },
  { name: 'Sevilla', country: 'ƒ∞spanya', district: 'Centro' },
  { name: 'Bilbao', country: 'ƒ∞spanya', district: 'Casco Viejo' },
  
  // Japonya
  { name: 'Tokyo', country: 'Japonya', district: 'Shibuya' },
  { name: 'Osaka', country: 'Japonya', district: 'Namba' },
  { name: 'Kyoto', country: 'Japonya', district: 'Gion' },
  { name: 'Yokohama', country: 'Japonya', district: 'Minato Mirai' },
  { name: 'Nagoya', country: 'Japonya', district: 'Sakae' },
  
  // G√ºney Kore
  { name: 'Seul', country: 'G√ºney Kore', district: 'Gangnam' },
  { name: 'Busan', country: 'G√ºney Kore', district: 'Haeundae' },
  { name: 'Incheon', country: 'G√ºney Kore', district: 'Songdo' },
  { name: 'Daegu', country: 'G√ºney Kore', district: 'Dongseong-ro' },
  { name: 'Daejeon', country: 'G√ºney Kore', district: 'Yuseong' }
];

// T√ºrk markalarƒ± ve cihaz t√ºrleri
const turkishBrands = [
  'Ar√ßelik', 'Beko', 'Vestel', 'Profilo', 'Altus', 'Regal', 'Simfer', 'Karaca', 'Tefal', 'Fakir'
];

const deviceTypes = [
  'Kombi', '√áama≈üƒ±r Makinasƒ±', 'Bula≈üƒ±k Makinasƒ±', 'Buzdolabƒ±', 'Klima', 'Fƒ±rƒ±n', 'Mikrodalga', 'Aspirat√∂r', 'Kurutma Makinasƒ±', 'Su Isƒ±tƒ±cƒ±sƒ±'
];

const faultTypes = [
  'Sƒ±cak su gelmiyor', '√áalƒ±≈ümƒ±yor', 'Su sƒ±zdƒ±rƒ±yor', 'Ses √ßƒ±karƒ±yor', 'Isƒ±tmƒ±yor', 'Soƒüutmuyor',
  'Elbiseler ƒ±slak √ßƒ±kƒ±yor', 'S√ºrekli √ßalƒ±≈üƒ±yor', 'Alarm veriyor', 'Garantisi yok', 'Bakƒ±m gerekli',
  'Par√ßa deƒüi≈üimi gerekli', 'Elektrik sorunu', 'Su basƒ±ncƒ± d√º≈ü√ºk', 'Termostat arƒ±zalƒ±'
];

// Adres √∂rnekleri
const addressTemplates = {
  'T√ºrkiye': [
    'Cumhuriyet Mh. Atat√ºrk Cd. No:{no} D:{d}',
    'Gen√ßlik Mh. Sevlap Evleri {no}. Ara Sk. No:{no} D:{d}',
    'Fatih Mh. Cumhuriyet Cd. No:{no} D:{d}',
    'Yeni Mahalle ƒ∞n√∂n√º Sk. No:{no} D:{d}',
    'Merkez Mh. Gazi Pa≈üa Cd. No:{no} D:{d}'
  ],
  'ƒ∞ngiltere': [
    'Baker Street {no}B',
    'Oxford Street {no}',
    'Regent Street {no}',
    'Piccadilly {no}',
    'Covent Garden {no}'
  ],
  'Fransa': [
    'Champs-√âlys√©es {no}',
    'Rue de Rivoli {no}',
    'Boulevard Saint-Germain {no}',
    'Avenue des Champs-√âlys√©es {no}',
    'Rue de la Paix {no}'
  ],
  'Almanya': [
    'Unter den Linden {no}',
    'Kurf√ºrstendamm {no}',
    'Neue Stra√üe {no}',
    'Hauptstra√üe {no}',
    'Bahnhofstra√üe {no}'
  ],
  'ƒ∞talya': [
    'Via del Corso {no}',
    'Piazza Navona {no}',
    'Via Veneto {no}',
    'Corso Buenos Aires {no}',
    'Via Roma {no}'
  ],
  'ƒ∞spanya': [
    'Gran V√≠a {no}',
    'Paseo de la Castellana {no}',
    'Rambla de Catalunya {no}',
    'Calle Serrano {no}',
    'Plaza Mayor {no}'
  ],
  'Japonya': [
    'Shibuya {no}-{no}-{no}',
    'Ginza {no}-{no}-{no}',
    'Harajuku {no}-{no}-{no}',
    'Roppongi {no}-{no}-{no}',
    'Shinjuku {no}-{no}-{no}'
  ],
  'G√ºney Kore': [
    'Gangnam-gu {no}-{no}',
    'Myeongdong {no}-{no}',
    'Hongdae {no}-{no}',
    'Itaewon {no}-{no}',
    'Insadong {no}-{no}'
  ]
};

function generateAddress(city: any) {
  const templates = addressTemplates[city.country as keyof typeof addressTemplates] || addressTemplates['T√ºrkiye'];
  const template = faker.helpers.arrayElement(templates);
  const no = faker.number.int({ min: 1, max: 999 });
  const d = faker.number.int({ min: 1, max: 20 });
  
  return template.replace(/{no}/g, no.toString()).replace(/{d}/g, d.toString());
}

function generatePhoneNumber(country: string) {
  const countryCodes = {
    'T√ºrkiye': '0(5XX) XXX-XXXX',
    'ƒ∞ngiltere': '+44 7XXX XXX XXX',
    'Fransa': '+33 6 XX XX XX XX',
    'Almanya': '+49 1XX XXXXXXX',
    'ƒ∞talya': '+39 3XX XXX XXXX',
    'ƒ∞spanya': '+34 6XX XXX XXX',
    'Japonya': '+81 90-XXXX-XXXX',
    'G√ºney Kore': '+82 10-XXXX-XXXX'
  };
  
  const pattern = countryCodes[country as keyof typeof countryCodes] || countryCodes['T√ºrkiye'];
  return pattern.replace(/X/g, () => faker.number.int({ min: 0, max: 9 }).toString());
}

async function seedInternationalData() {
  console.log('üåç Uluslararasƒ± m√º≈üteri verileri olu≈üturuluyor...');

  // Kategoriler olu≈ütur
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { id: 'customer-premium' },
      update: {},
      create: {
        id: 'customer-premium',
        type: 'customer',
        name: 'Premium M√º≈üteri'
      }
    }),
    prisma.category.upsert({
      where: { id: 'customer-regular' },
      update: {},
      create: {
        id: 'customer-regular',
        type: 'customer',
        name: 'Normal M√º≈üteri'
      }
    }),
    prisma.category.upsert({
      where: { id: 'customer-corporate' },
      update: {},
      create: {
        id: 'customer-corporate',
        type: 'customer',
        name: 'Kurumsal M√º≈üteri'
      }
    })
  ]);

  // M√º≈üteriler olu≈ütur
  const customers = [];
  const allNames = [...turkishNames, ...internationalNames];
  
  for (let i = 0; i < 150; i++) {
    const name = faker.helpers.arrayElement(allNames);
    const city = faker.helpers.arrayElement(cities);
    const category = faker.helpers.arrayElement(categories);
    const isTurkish = turkishNames.includes(name);
    
    const customer = await prisma.customer.create({
      data: {
        type: faker.helpers.arrayElement(['individual', 'corporate']),
        name,
        phone: generatePhoneNumber(city.country),
        phone2: faker.datatype.boolean() ? generatePhoneNumber(city.country) : null,
        email: faker.internet.email(),
        address: generateAddress(city),
        city: city.name,
        district: city.district,
        taxNo: faker.datatype.boolean() ? faker.string.numeric(10) : null,
        taxOffice: faker.datatype.boolean() ? faker.company.name() + ' Vergi Dairesi' : null,
        categoryId: category.id,
        isSupplier: faker.datatype.boolean({ probability: 0.1 })
      }
    });
    
    customers.push(customer);
  }

  // Personel olu≈ütur
  const staff = [];
  for (let i = 0; i < 10; i++) {
    const name = faker.helpers.arrayElement(turkishNames);
    const city = faker.helpers.arrayElement(cities.filter(c => c.country === 'T√ºrkiye'));
    
    const user = await prisma.user.create({
      data: {
        email: faker.internet.email(),
        password: '$2b$10$example', // Hash'lenmi≈ü ≈üifre
        name,
        phone: generatePhoneNumber('T√ºrkiye'),
        phone2: faker.datatype.boolean() ? generatePhoneNumber('T√ºrkiye') : null,
        address: generateAddress(city),
        city: city.name,
        district: city.district,
        position: faker.helpers.arrayElement(['Teknisyen', 'Operat√∂r', 'M√ºd√ºr', 'Uzman', 'Asistan']),
        status: faker.datatype.boolean({ probability: 0.9 }),
        hireDate: faker.date.past({ years: 5 }),
        photoUrl: null,
        tcNo: faker.string.numeric(11),
        permissions: JSON.stringify({})
      }
    });
    
    staff.push(user);
  }

  // Servisler olu≈ütur
  const services = [];
  for (let i = 0; i < 200; i++) {
    const customer = faker.helpers.arrayElement(customers);
    const technician = faker.helpers.arrayElement(staff);
    const operator = faker.helpers.arrayElement(staff);
    const deviceBrand = faker.helpers.arrayElement(turkishBrands);
    const deviceType = faker.helpers.arrayElement(deviceTypes);
    const problem = faker.helpers.arrayElement(faultTypes);
    
    const service = await prisma.service.create({
      data: {
        serviceNo: faker.string.numeric(6),
        customerId: customer.id,
        technicianId: technician.id,
        operatorId: operator.id,
        deviceBrand,
        deviceType,
        deviceModel: faker.helpers.arrayElement([
          'Seri 9', 'Inverter', 'Bakƒ±m 2500TI', 'Sessiz √áalƒ±≈üma', 'Garantisi Yok',
          'Premium', 'Eco', 'Smart', 'Pro', 'Max'
        ]),
        serialNo: faker.string.alphanumeric(10),
        problem,
        solution: faker.datatype.boolean() ? faker.lorem.sentence() : null,
        diagnosis: faker.datatype.boolean() ? faker.lorem.sentence() : null,
        status: faker.helpers.arrayElement([
          'Teknisyen Y√∂nlendir', 'PAR√áA Sƒ∞PARƒ∞≈ûƒ∞ VERƒ∞LDƒ∞', 'At√∂lyeye Alƒ±ndƒ±',
          'Haber Verecek', 'Servisi Sonlandƒ±r', 'M√º≈üteri ƒ∞ptal Etti'
        ]),
        priority: faker.helpers.arrayElement(['normal', 'high', 'urgent']),
        receivedDate: faker.date.recent({ days: 30 }),
        deliveryDate: faker.datatype.boolean() ? faker.date.future(0.08) : null, // ~30 days
        laborCost: faker.number.float({ min: 100, max: 1000, fractionDigits: 2 }),
        partsCost: faker.number.float({ min: 50, max: 2000, fractionDigits: 2 }),
        totalCost: faker.number.float({ min: 200, max: 3000, fractionDigits: 2 }),
        paymentStatus: faker.helpers.arrayElement(['unpaid', 'paid', 'partial']),
        serviceSource: generatePhoneNumber('T√ºrkiye'),
        operatorNote: faker.datatype.boolean() ? faker.lorem.sentence() : null,
        availableTime: faker.helpers.arrayElement([
          '08.10.2025 - 09:00 ile 18:00 Arasƒ±',
          '09.10.2025 - 10:00 ile 17:00 Arasƒ±',
          '10.10.2025 - 14:00 ile 20:00 Arasƒ±',
          'Hafta i√ßi herhangi bir saat',
          'Hafta sonu sabah saatleri'
        ]),
        warrantyEnd: faker.datatype.boolean() ? faker.date.future({ years: 2 }) : null,
        warrantyDaysLeft: faker.datatype.boolean() ? faker.number.int({ min: 1, max: 730 }) : null,
        photos: JSON.stringify([])
      }
    });
    
    services.push(service);
  }

  // Servis i≈ülemleri olu≈ütur
  for (const service of services.slice(0, 100)) {
    const operationCount = faker.number.int({ min: 1, max: 5 });
    
    for (let i = 0; i < operationCount; i++) {
      await prisma.serviceOperation.create({
        data: {
          serviceId: service.id,
          operationDate: faker.date.between({ 
            from: service.receivedDate, 
            to: new Date() 
          }),
          operatorId: faker.helpers.arrayElement(staff).id,
          operationName: faker.helpers.arrayElement([
            'Teknisyen Y√∂nlendir', 'Par√ßa Sipari≈üi', 'At√∂lyeye Alƒ±ndƒ±',
            'M√º≈üteri Arandƒ±', 'Servis Tamamlandƒ±', 'Garanti Kontrol√º'
          ]),
          description: faker.lorem.sentence()
        }
      });
    }
  }

  // Servis notlarƒ± olu≈ütur
  for (const service of services.slice(0, 80)) {
    const noteCount = faker.number.int({ min: 0, max: 3 });
    
    for (let i = 0; i < noteCount; i++) {
      await prisma.serviceNote.create({
        data: {
          serviceId: service.id,
          noteDate: faker.date.between({ 
            from: service.receivedDate, 
            to: new Date() 
          }),
          noteBy: faker.helpers.arrayElement(staff).id,
          content: faker.lorem.sentence()
        }
      });
    }
  }

  // Kasa i≈ülemleri olu≈ütur
  for (let i = 0; i < 100; i++) {
    const service = faker.helpers.arrayElement(services);
    const technician = faker.helpers.arrayElement(staff);
    
    await prisma.cashTransaction.create({
      data: {
        type: faker.helpers.arrayElement(['income', 'expense']),
        amount: faker.number.float({ min: 50, max: 2000, fractionDigits: 2 }),
        paymentMethod: faker.helpers.arrayElement(['cash', 'card', 'transfer']),
        paymentStatus: faker.helpers.arrayElement(['completed', 'pending', 'cancelled']),
        relatedServiceId: faker.datatype.boolean() ? service.id : null,
        technicianId: technician.id,
        description: faker.lorem.sentence(),
        transactionDate: faker.date.recent({ days: 30 }),
        installmentCount: faker.number.int({ min: 1, max: 12 })
      }
    });
  }

  console.log('‚úÖ Uluslararasƒ± veri olu≈üturma tamamlandƒ±!');
  console.log(`üìä Olu≈üturulan veriler:`);
  console.log(`   - M√º≈üteriler: ${customers.length}`);
  console.log(`   - Personel: ${staff.length}`);
  console.log(`   - Servisler: ${services.length}`);
  console.log(`   - Kategoriler: ${categories.length}`);
}

seedInternationalData()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
